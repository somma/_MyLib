/**
 * @file    _test_dns_query.cpp
 * @brief
 *
 * @author  Yonhgwhan, Roh (somma@somma.kr)
 * @date    2018/05/17 15:21 created.
 * @copyright (C)Somma, Inc. All rights reserved.
 **/
#include "stdafx.h"
#include <crtdbg.h>

#include "net_util.h"
#include "StopWatch.h"

 /// @brief
bool test_ip_to_dns()
{
	wchar_t* ips[] = {
		L"101.79.137.130", L"101.79.211.75", L"103.105.156.85", L"103.15.158.128",
		L"103.15.158.129", L"103.15.158.153", L"103.229.206.27", L"103.231.98.48",
		L"103.243.220.231", L"103.243.220.234", L"103.27.148.71", L"103.6.174.105",
		L"103.6.174.115", L"103.71.26.125", L"103.84.152.177", L"103.84.152.178",
		L"104.124.189.140", L"104.124.243.17", L"104.155.236.164", L"104.16.162.13",
		L"104.16.224.240", L"104.16.228.152", L"104.16.249.5", L"104.16.252.5",
		L"104.16.253.5", L"104.16.85.20", L"104.16.89.188", L"104.16.89.20",
		L"104.17.102.175", L"104.17.103.175", L"104.17.104.175", L"104.17.105.175",
		L"104.17.106.175", L"104.17.210.204", L"104.17.235.204", L"104.17.237.204",
		L"104.18.24.243", L"104.18.25.243", L"104.19.195.151", L"104.19.196.151",
		L"104.19.197.151", L"104.19.198.151", L"104.193.80.60", L"104.198.94.254",
		L"104.20.111.39", L"104.20.168.10", L"104.20.169.10", L"104.20.186.5",
		L"104.209.47.112", L"104.215.17.202", L"104.215.21.84", L"104.237.191.1",
		L"104.24.18.65", L"104.24.246.16", L"104.244.42.200", L"104.244.43.48",
		L"104.31.74.124", L"104.31.75.124", L"104.43.203.255", L"104.74.148.124",
		L"104.74.148.234", L"104.74.151.71", L"104.74.153.26", L"104.74.154.37",
		L"104.74.162.162", L"104.74.165.136", L"104.74.171.196", L"104.74.174.89",
		L"104.74.177.25", L"104.74.178.4", L"104.74.182.221", L"104.74.182.242",
		L"104.74.188.12", L"104.74.193.168", L"104.74.211.221", L"104.74.220.23",
		L"104.74.220.31", L"104.74.247.82", L"104.75.11.224", L"104.75.17.178",
		L"104.75.26.190", L"104.75.35.118", L"104.75.42.31", L"104.75.45.149",
		L"104.75.8.148", L"104.75.9.216", L"104.76.131.98", L"104.76.140.232",
		L"104.76.82.124", L"106.10.193.31", L"106.10.198.33", L"107.6.122.29",
		L"108.59.4.173", L"110.10.122.142", L"110.76.141.124", L"111.119.22.152",
		L"111.119.22.180", L"111.119.22.184", L"111.221.29.13", L"111.221.29.174",
		L"111.221.29.253", L"111.221.29.254", L"111.221.29.30", L"111.221.29.40",
		L"111.221.29.46", L"113.29.189.156", L"113.29.189.164", L"113.29.189.47",
		L"114.130.4.77", L"117.18.232.133", L"117.18.232.200", L"117.18.232.232",
		L"117.18.232.240", L"117.18.237.17", L"117.18.237.245", L"117.18.237.29",
		L"117.18.237.42", L"117.18.237.97", L"117.52.130.123", L"118.22.93.111",
		L"119.207.64.147", L"119.207.64.153", L"119.207.64.16", L"119.207.64.17",
		L"119.207.64.19", L"119.207.64.24", L"119.207.65.176", L"119.207.65.35",
		L"119.207.66.145", L"119.207.66.155", L"119.207.66.160", L"119.207.66.185",
		L"122.248.234.94", L"125.209.207.10", L"125.209.210.116", L"125.209.218.79",
		L"125.209.226.239", L"125.209.230.195", L"125.209.230.238", L"125.209.234.101",
		L"125.209.234.81", L"13.107.128.254", L"13.107.136.254", L"13.107.21.200",
		L"13.107.246.254", L"13.107.3.128", L"13.107.3.254", L"13.107.42.254",
		L"13.107.4.50", L"13.107.54.254", L"13.107.5.88", L"13.107.6.158",
		L"13.112.105.162", L"13.112.243.196", L"13.113.112.168", L"13.113.51.110",
		L"13.113.51.176", L"13.113.70.177", L"13.114.9.59", L"13.115.0.186",
		L"13.115.26.131", L"13.124.96.191", L"13.125.106.166", L"131.253.14.231",
		L"131.253.61.100", L"131.253.61.102", L"131.253.61.64", L"131.253.61.66",
		L"131.253.61.68", L"131.253.61.70", L"131.253.61.80", L"131.253.61.82",
		L"131.253.61.84", L"131.253.61.86", L"131.253.61.96", L"131.253.61.98",
		L"13.228.155.108", L"13.228.226.45", L"13.231.12.16", L"13.250.76.141",
		L"13.32.67.31", L"134.170.115.62", L"134.170.165.249", L"13.56.96.0",
		L"136.147.100.130", L"136.147.100.2", L"136.147.101.2", L"136.147.102.130",

	};

	uint32_t log_to = get_log_to();
	set_log_to(log_to_con | log_to_ods);

	uint32_t succ = 0;
	uint32_t cache = 0;
	uint32_t wire = 0;

	StopWatch sw;
	sw.Start();



	for (int i = 0; i < sizeof(ips) / sizeof(wchar_t*); ++i)
	{
		uint32_t ip_nb;
		_ASSERTE(true == str_to_ipv4(ips[i], ip_nb));

		std::wstring dns1, dns2;
		if (true == ip_to_dns(ip_nb, true, dns1))
		{
			++cache;
			++succ;
		}
		else
		{
			if (true == ip_to_dns(ip_nb, false, dns2))
			{
				++wire;
				++succ;
			}
		}

		//log_info "ip=%ws, dns1=%ws, dns2=%ws",
		//	ips[i],
		//	dns1.c_str(),
		//	dns2.c_str()
		//	log_end;
	}
	sw.Stop();
	log_info "Done. total=%u, succ=%u, cache=%u, wire=%u, elapsed= %f",
		sizeof(ips) / sizeof(wchar_t*),
		succ,
		cache,
		wire,
		sw.GetDurationMilliSecond() log_end;
	set_log_to(log_to);
	return true;
}


bool test_dns_to_ip()
{
	_mem_check_begin
	{
		std::vector<uint32_t> ipz;
		_ASSERTE(true == dns_to_ip(L"naver.com", false, ipz));
		log_info "naver.com :" log_end;
		for (auto ip : ipz)
		{
			log_info "  - %s", ipv4_to_str(ip).c_str() log_end;
		}

		ipz.clear();
		_ASSERTE(true != dns_to_ip(L"inv.invalid.xyz", false, ipz));
	}
	_mem_check_end;


	return true;
}